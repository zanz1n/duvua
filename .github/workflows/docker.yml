name: Docker

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build-and-publish:
    name: Build and publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Bot docker image metadata
        id: docker_bot_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-bot
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' && github.event.release.prerelease == false }}
            type=ref,event=tag
            type=ref,event=branch

      - name: Player docker image metadata
        id: docker_player_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-player
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' && github.event.release.prerelease == false }}
            type=ref,event=tag
            type=ref,event=branch

      - name: Davinci docker image metadata
        id: docker_davinci_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-davinci
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' && github.event.release.prerelease == false }}
            type=ref,event=tag
            type=ref,event=branch

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Build Information
        id: build_info
        run: |
          echo "version_tag=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and Push bot (tag)
        uses: docker/build-push-action@v5
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          context: .
          file: ./docker/bot.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.build_info.outputs.version_tag }}
          labels: ${{ steps.docker_bot_meta.outputs.labels }}
          tags: ${{ steps.docker_bot_meta.outputs.tags }}

      - name: Build and Push bot (main)
        uses: docker/build-push-action@v5
        if: github.event_name == 'push' && contains(github.ref, 'main')
        with:
          context: .
          file: ./docker/bot.dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          build-args: |
            VERSION=dev-${{ steps.build_info.outputs.short_sha }}
          labels: ${{ steps.docker_bot_meta.outputs.labels }}
          tags: ${{ steps.docker_bot_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push player (tag)
        uses: docker/build-push-action@v5
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          context: .
          file: ./docker/player.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.build_info.outputs.version_tag }}
          labels: ${{ steps.docker_player_meta.outputs.labels }}
          tags: ${{ steps.docker_player_meta.outputs.tags }}

      - name: Build and Push player (main)
        uses: docker/build-push-action@v5
        if: github.event_name == 'push' && contains(github.ref, 'main')
        with:
          context: .
          file: ./docker/player.dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          build-args: |
            VERSION=dev-${{ steps.build_info.outputs.short_sha }}
          labels: ${{ steps.docker_player_meta.outputs.labels }}
          tags: ${{ steps.docker_player_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push davinci (tag)
        uses: docker/build-push-action@v5
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          context: .
          file: ./docker/davinci.dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            VERSION=${{ steps.build_info.outputs.version_tag }}
          labels: ${{ steps.docker_davinci_meta.outputs.labels }}
          tags: ${{ steps.docker_davinci_meta.outputs.tags }}

      - name: Build and Push davinci (main)
        uses: docker/build-push-action@v5
        if: github.event_name == 'push' && contains(github.ref, 'main')
        with:
          context: .
          file: ./docker/davinci.dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          build-args: |
            VERSION=dev-${{ steps.build_info.outputs.short_sha }}
          labels: ${{ steps.docker_davinci_meta.outputs.labels }}
          tags: ${{ steps.docker_davinci_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
