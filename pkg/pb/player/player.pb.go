// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: api/proto/player/player.proto

package player

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerError int32

const (
	PlayerError_ErrAny                          PlayerError = 0
	PlayerError_ErrTooMuchTimePaused            PlayerError = 1
	PlayerError_ErrVoiceConnectionClosed        PlayerError = 2
	PlayerError_ErrTrackSearchFailed            PlayerError = 3
	PlayerError_ErrTrackSearchInvalidUrl        PlayerError = 4
	PlayerError_ErrTrackSearchUnsuported        PlayerError = 5
	PlayerError_ErrTrackNotFoundInQueue         PlayerError = 6
	PlayerError_ErrNoActivePlayer               PlayerError = 7
	PlayerError_ErrSpotifyPlaylistsNotSupported PlayerError = 8
)

// Enum value maps for PlayerError.
var (
	PlayerError_name = map[int32]string{
		0: "ErrAny",
		1: "ErrTooMuchTimePaused",
		2: "ErrVoiceConnectionClosed",
		3: "ErrTrackSearchFailed",
		4: "ErrTrackSearchInvalidUrl",
		5: "ErrTrackSearchUnsuported",
		6: "ErrTrackNotFoundInQueue",
		7: "ErrNoActivePlayer",
		8: "ErrSpotifyPlaylistsNotSupported",
	}
	PlayerError_value = map[string]int32{
		"ErrAny":                          0,
		"ErrTooMuchTimePaused":            1,
		"ErrVoiceConnectionClosed":        2,
		"ErrTrackSearchFailed":            3,
		"ErrTrackSearchInvalidUrl":        4,
		"ErrTrackSearchUnsuported":        5,
		"ErrTrackNotFoundInQueue":         6,
		"ErrNoActivePlayer":               7,
		"ErrSpotifyPlaylistsNotSupported": 8,
	}
)

func (x PlayerError) Enum() *PlayerError {
	p := new(PlayerError)
	*p = x
	return p
}

func (x PlayerError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerError) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_player_player_proto_enumTypes[0].Descriptor()
}

func (PlayerError) Type() protoreflect.EnumType {
	return &file_api_proto_player_player_proto_enumTypes[0]
}

func (x PlayerError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerError.Descriptor instead.
func (PlayerError) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{0}
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" validate:"required"`
	UserId    uint64                 `protobuf:"fixed64,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" validate:"required"`
	ChannelId uint64                 `protobuf:"fixed64,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" validate:"required"`
	State     *TrackState            `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Data      *TrackData             `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty" validate:"required"`
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_api_proto_player_player_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{0}
}

func (x *Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Track) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Track) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Track) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *Track) GetState() *TrackState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Track) GetData() *TrackData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TrackState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress     *durationpb.Duration   `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	PlayingStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=playing_start,json=playingStart,proto3" json:"playing_start,omitempty" validate:"required"`
	Looping      bool                   `protobuf:"varint,3,opt,name=looping,proto3" json:"looping,omitempty"`
}

func (x *TrackState) Reset() {
	*x = TrackState{}
	mi := &file_api_proto_player_player_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackState) ProtoMessage() {}

func (x *TrackState) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackState.ProtoReflect.Descriptor instead.
func (*TrackState) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{1}
}

func (x *TrackState) GetProgress() *durationpb.Duration {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *TrackState) GetPlayingStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PlayingStart
	}
	return nil
}

func (x *TrackState) GetLooping() bool {
	if x != nil {
		return x.Looping
	}
	return false
}

type TrackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required"`
	Url       string               `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty" validate:"required"`
	PlayQuery string               `protobuf:"bytes,3,opt,name=play_query,json=playQuery,proto3" json:"play_query,omitempty" validate:"required"`
	Thumbnail string               `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty" validate:"required"`
	Duration  *durationpb.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty" validate:"required"`
}

func (x *TrackData) Reset() {
	*x = TrackData{}
	mi := &file_api_proto_player_player_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackData) ProtoMessage() {}

func (x *TrackData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackData.ProtoReflect.Descriptor instead.
func (*TrackData) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{2}
}

func (x *TrackData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TrackData) GetPlayQuery() string {
	if x != nil {
		return x.PlayQuery
	}
	return ""
}

func (x *TrackData) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *TrackData) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type GuildIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
}

func (x *GuildIdRequest) Reset() {
	*x = GuildIdRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIdRequest) ProtoMessage() {}

func (x *GuildIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIdRequest.ProtoReflect.Descriptor instead.
func (*GuildIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{3}
}

func (x *GuildIdRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type TrackIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid"`
}

func (x *TrackIdRequest) Reset() {
	*x = TrackIdRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIdRequest) ProtoMessage() {}

func (x *TrackIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIdRequest.ProtoReflect.Descriptor instead.
func (*TrackIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{4}
}

func (x *TrackIdRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *TrackIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track *Track `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *TrackResponse) Reset() {
	*x = TrackResponse{}
	mi := &file_api_proto_player_player_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackResponse) ProtoMessage() {}

func (x *TrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackResponse.ProtoReflect.Descriptor instead.
func (*TrackResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{5}
}

func (x *TrackResponse) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type ChangedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changed bool `protobuf:"varint,1,opt,name=changed,proto3" json:"changed,omitempty"`
}

func (x *ChangedResponse) Reset() {
	*x = ChangedResponse{}
	mi := &file_api_proto_player_player_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedResponse) ProtoMessage() {}

func (x *ChangedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedResponse.ProtoReflect.Descriptor instead.
func (*ChangedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{6}
}

func (x *ChangedResponse) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

type FetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" validate:"required"`
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{7}
}

func (x *FetchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type FetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TrackData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" validate:"required"`
}

func (x *FetchResponse) Reset() {
	*x = FetchResponse{}
	mi := &file_api_proto_player_player_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResponse) ProtoMessage() {}

func (x *FetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResponse.ProtoReflect.Descriptor instead.
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{8}
}

func (x *FetchResponse) GetData() []*TrackData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAllRequest) Reset() {
	*x = GetAllRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRequest) ProtoMessage() {}

func (x *GetAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRequest.ProtoReflect.Descriptor instead.
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GetAllRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSize     int32                `protobuf:"varint,1,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	TotalDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration,omitempty"`
	Playing       *Track               `protobuf:"bytes,3,opt,name=playing,proto3" json:"playing,omitempty"`
	Tracks        []*Track             `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *GetAllResponse) Reset() {
	*x = GetAllResponse{}
	mi := &file_api_proto_player_player_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResponse) ProtoMessage() {}

func (x *GetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResponse.ProtoReflect.Descriptor instead.
func (*GetAllResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *GetAllResponse) GetTotalDuration() *durationpb.Duration {
	if x != nil {
		return x.TotalDuration
	}
	return nil
}

func (x *GetAllResponse) GetPlaying() *Track {
	if x != nil {
		return x.Playing
	}
	return nil
}

func (x *GetAllResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type AddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId       uint64       `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
	UserId        uint64       `protobuf:"fixed64,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" validate:"required"`
	ChannelId     uint64       `protobuf:"fixed64,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" validate:"required"`
	TextChannelId uint64       `protobuf:"fixed64,4,opt,name=text_channel_id,json=textChannelId,proto3" json:"text_channel_id,omitempty" validate:"required"`
	Data          []*TrackData `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" validate:"required"`
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{11}
}

func (x *AddRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *AddRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddRequest) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AddRequest) GetTextChannelId() uint64 {
	if x != nil {
		return x.TextChannelId
	}
	return 0
}

func (x *AddRequest) GetData() []*TrackData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty" validate:"required"`
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	mi := &file_api_proto_player_player_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponse.ProtoReflect.Descriptor instead.
func (*AddResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{12}
}

func (x *AddResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type EnableLoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
	Enable  bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *EnableLoopRequest) Reset() {
	*x = EnableLoopRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableLoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableLoopRequest) ProtoMessage() {}

func (x *EnableLoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableLoopRequest.ProtoReflect.Descriptor instead.
func (*EnableLoopRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{13}
}

func (x *EnableLoopRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *EnableLoopRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SetVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
	Volume  int32  `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty" validate:"gte=0,lte=255"`
}

func (x *SetVolumeRequest) Reset() {
	*x = SetVolumeRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumeRequest) ProtoMessage() {}

func (x *SetVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumeRequest.ProtoReflect.Descriptor instead.
func (*SetVolumeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{14}
}

func (x *SetVolumeRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *SetVolumeRequest) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type RemoveByPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId  uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" validate:"required"`
	Position int32  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *RemoveByPositionRequest) Reset() {
	*x = RemoveByPositionRequest{}
	mi := &file_api_proto_player_player_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveByPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveByPositionRequest) ProtoMessage() {}

func (x *RemoveByPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_player_player_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveByPositionRequest.ProtoReflect.Descriptor instead.
func (*RemoveByPositionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_player_player_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveByPositionRequest) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *RemoveByPositionRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

var File_api_proto_player_player_proto protoreflect.FileDescriptor

var file_api_proto_player_player_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x02, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb8, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xa7, 0x02, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x9a, 0x84, 0x9e, 0x03, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x34, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x50, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0xb0,
	0x02, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4e, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x22, 0x60, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x9a, 0x84,
	0x9e, 0x03, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x67, 0x74, 0x65,
	0x3d, 0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x32, 0x35, 0x35, 0x22, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x80, 0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x72, 0x72, 0x54, 0x6f, 0x6f, 0x4d, 0x75, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x72, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x72, 0x6c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x72, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x72, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x07, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x72, 0x72, 0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x08, 0x32, 0x8a, 0x06, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_proto_player_player_proto_rawDescOnce sync.Once
	file_api_proto_player_player_proto_rawDescData = file_api_proto_player_player_proto_rawDesc
)

func file_api_proto_player_player_proto_rawDescGZIP() []byte {
	file_api_proto_player_player_proto_rawDescOnce.Do(func() {
		file_api_proto_player_player_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_player_player_proto_rawDescData)
	})
	return file_api_proto_player_player_proto_rawDescData
}

var file_api_proto_player_player_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_player_player_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_proto_player_player_proto_goTypes = []any{
	(PlayerError)(0),                // 0: player.PlayerError
	(*Track)(nil),                   // 1: player.Track
	(*TrackState)(nil),              // 2: player.TrackState
	(*TrackData)(nil),               // 3: player.TrackData
	(*GuildIdRequest)(nil),          // 4: player.GuildIdRequest
	(*TrackIdRequest)(nil),          // 5: player.TrackIdRequest
	(*TrackResponse)(nil),           // 6: player.TrackResponse
	(*ChangedResponse)(nil),         // 7: player.ChangedResponse
	(*FetchRequest)(nil),            // 8: player.FetchRequest
	(*FetchResponse)(nil),           // 9: player.FetchResponse
	(*GetAllRequest)(nil),           // 10: player.GetAllRequest
	(*GetAllResponse)(nil),          // 11: player.GetAllResponse
	(*AddRequest)(nil),              // 12: player.AddRequest
	(*AddResponse)(nil),             // 13: player.AddResponse
	(*EnableLoopRequest)(nil),       // 14: player.EnableLoopRequest
	(*SetVolumeRequest)(nil),        // 15: player.SetVolumeRequest
	(*RemoveByPositionRequest)(nil), // 16: player.RemoveByPositionRequest
	(*timestamppb.Timestamp)(nil),   // 17: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 18: google.protobuf.Duration
	(*emptypb.Empty)(nil),           // 19: google.protobuf.Empty
}
var file_api_proto_player_player_proto_depIdxs = []int32{
	17, // 0: player.Track.created_at:type_name -> google.protobuf.Timestamp
	2,  // 1: player.Track.state:type_name -> player.TrackState
	3,  // 2: player.Track.data:type_name -> player.TrackData
	18, // 3: player.TrackState.progress:type_name -> google.protobuf.Duration
	17, // 4: player.TrackState.playing_start:type_name -> google.protobuf.Timestamp
	18, // 5: player.TrackData.duration:type_name -> google.protobuf.Duration
	1,  // 6: player.TrackResponse.track:type_name -> player.Track
	3,  // 7: player.FetchResponse.data:type_name -> player.TrackData
	18, // 8: player.GetAllResponse.total_duration:type_name -> google.protobuf.Duration
	1,  // 9: player.GetAllResponse.playing:type_name -> player.Track
	1,  // 10: player.GetAllResponse.tracks:type_name -> player.Track
	3,  // 11: player.AddRequest.data:type_name -> player.TrackData
	1,  // 12: player.AddResponse.tracks:type_name -> player.Track
	8,  // 13: player.Player.Fetch:input_type -> player.FetchRequest
	4,  // 14: player.Player.GetCurrent:input_type -> player.GuildIdRequest
	5,  // 15: player.Player.GetById:input_type -> player.TrackIdRequest
	10, // 16: player.Player.GetAll:input_type -> player.GetAllRequest
	12, // 17: player.Player.Add:input_type -> player.AddRequest
	4,  // 18: player.Player.Skip:input_type -> player.GuildIdRequest
	4,  // 19: player.Player.Stop:input_type -> player.GuildIdRequest
	4,  // 20: player.Player.Pause:input_type -> player.GuildIdRequest
	4,  // 21: player.Player.Unpause:input_type -> player.GuildIdRequest
	14, // 22: player.Player.EnableLoop:input_type -> player.EnableLoopRequest
	15, // 23: player.Player.SetVolume:input_type -> player.SetVolumeRequest
	5,  // 24: player.Player.Remove:input_type -> player.TrackIdRequest
	16, // 25: player.Player.RemoveByPosition:input_type -> player.RemoveByPositionRequest
	9,  // 26: player.Player.Fetch:output_type -> player.FetchResponse
	6,  // 27: player.Player.GetCurrent:output_type -> player.TrackResponse
	6,  // 28: player.Player.GetById:output_type -> player.TrackResponse
	11, // 29: player.Player.GetAll:output_type -> player.GetAllResponse
	13, // 30: player.Player.Add:output_type -> player.AddResponse
	6,  // 31: player.Player.Skip:output_type -> player.TrackResponse
	19, // 32: player.Player.Stop:output_type -> google.protobuf.Empty
	7,  // 33: player.Player.Pause:output_type -> player.ChangedResponse
	7,  // 34: player.Player.Unpause:output_type -> player.ChangedResponse
	7,  // 35: player.Player.EnableLoop:output_type -> player.ChangedResponse
	7,  // 36: player.Player.SetVolume:output_type -> player.ChangedResponse
	6,  // 37: player.Player.Remove:output_type -> player.TrackResponse
	6,  // 38: player.Player.RemoveByPosition:output_type -> player.TrackResponse
	26, // [26:39] is the sub-list for method output_type
	13, // [13:26] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_proto_player_player_proto_init() }
func file_api_proto_player_player_proto_init() {
	if File_api_proto_player_player_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_player_player_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_player_player_proto_goTypes,
		DependencyIndexes: file_api_proto_player_player_proto_depIdxs,
		EnumInfos:         file_api_proto_player_player_proto_enumTypes,
		MessageInfos:      file_api_proto_player_player_proto_msgTypes,
	}.Build()
	File_api_proto_player_player_proto = out.File
	file_api_proto_player_player_proto_rawDesc = nil
	file_api_proto_player_player_proto_goTypes = nil
	file_api_proto_player_player_proto_depIdxs = nil
}
