// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/proto/player/player.proto

package player

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Player_Fetch_FullMethodName            = "/player.Player/Fetch"
	Player_GetCurrent_FullMethodName       = "/player.Player/GetCurrent"
	Player_GetById_FullMethodName          = "/player.Player/GetById"
	Player_GetAll_FullMethodName           = "/player.Player/GetAll"
	Player_Add_FullMethodName              = "/player.Player/Add"
	Player_Skip_FullMethodName             = "/player.Player/Skip"
	Player_Stop_FullMethodName             = "/player.Player/Stop"
	Player_Pause_FullMethodName            = "/player.Player/Pause"
	Player_Unpause_FullMethodName          = "/player.Player/Unpause"
	Player_EnableLoop_FullMethodName       = "/player.Player/EnableLoop"
	Player_SetVolume_FullMethodName        = "/player.Player/SetVolume"
	Player_Remove_FullMethodName           = "/player.Player/Remove"
	Player_RemoveByPosition_FullMethodName = "/player.Player/RemoveByPosition"
)

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	GetCurrent(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	GetById(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Skip(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	Stop(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Pause(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*ChangedResponse, error)
	Unpause(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*ChangedResponse, error)
	EnableLoop(ctx context.Context, in *EnableLoopRequest, opts ...grpc.CallOption) (*ChangedResponse, error)
	SetVolume(ctx context.Context, in *SetVolumeRequest, opts ...grpc.CallOption) (*ChangedResponse, error)
	Remove(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	RemoveByPosition(ctx context.Context, in *RemoveByPositionRequest, opts ...grpc.CallOption) (*TrackResponse, error)
}

type playerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClient(cc grpc.ClientConnInterface) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, Player_Fetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetCurrent(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, Player_GetCurrent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetById(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, Player_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, Player_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Player_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Skip(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, Player_Skip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Stop(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Player_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Pause(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*ChangedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangedResponse)
	err := c.cc.Invoke(ctx, Player_Pause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Unpause(ctx context.Context, in *GuildIdRequest, opts ...grpc.CallOption) (*ChangedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangedResponse)
	err := c.cc.Invoke(ctx, Player_Unpause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) EnableLoop(ctx context.Context, in *EnableLoopRequest, opts ...grpc.CallOption) (*ChangedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangedResponse)
	err := c.cc.Invoke(ctx, Player_EnableLoop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) SetVolume(ctx context.Context, in *SetVolumeRequest, opts ...grpc.CallOption) (*ChangedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangedResponse)
	err := c.cc.Invoke(ctx, Player_SetVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Remove(ctx context.Context, in *TrackIdRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, Player_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) RemoveByPosition(ctx context.Context, in *RemoveByPositionRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, Player_RemoveByPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
// All implementations must embed UnimplementedPlayerServer
// for forward compatibility.
type PlayerServer interface {
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	GetCurrent(context.Context, *GuildIdRequest) (*TrackResponse, error)
	GetById(context.Context, *TrackIdRequest) (*TrackResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Skip(context.Context, *GuildIdRequest) (*TrackResponse, error)
	Stop(context.Context, *GuildIdRequest) (*emptypb.Empty, error)
	Pause(context.Context, *GuildIdRequest) (*ChangedResponse, error)
	Unpause(context.Context, *GuildIdRequest) (*ChangedResponse, error)
	EnableLoop(context.Context, *EnableLoopRequest) (*ChangedResponse, error)
	SetVolume(context.Context, *SetVolumeRequest) (*ChangedResponse, error)
	Remove(context.Context, *TrackIdRequest) (*TrackResponse, error)
	RemoveByPosition(context.Context, *RemoveByPositionRequest) (*TrackResponse, error)
	mustEmbedUnimplementedPlayerServer()
}

// UnimplementedPlayerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerServer struct{}

func (UnimplementedPlayerServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedPlayerServer) GetCurrent(context.Context, *GuildIdRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrent not implemented")
}
func (UnimplementedPlayerServer) GetById(context.Context, *TrackIdRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPlayerServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPlayerServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPlayerServer) Skip(context.Context, *GuildIdRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Skip not implemented")
}
func (UnimplementedPlayerServer) Stop(context.Context, *GuildIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPlayerServer) Pause(context.Context, *GuildIdRequest) (*ChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlayerServer) Unpause(context.Context, *GuildIdRequest) (*ChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedPlayerServer) EnableLoop(context.Context, *EnableLoopRequest) (*ChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLoop not implemented")
}
func (UnimplementedPlayerServer) SetVolume(context.Context, *SetVolumeRequest) (*ChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (UnimplementedPlayerServer) Remove(context.Context, *TrackIdRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedPlayerServer) RemoveByPosition(context.Context, *RemoveByPositionRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByPosition not implemented")
}
func (UnimplementedPlayerServer) mustEmbedUnimplementedPlayerServer() {}
func (UnimplementedPlayerServer) testEmbeddedByValue()                {}

// UnsafePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServer will
// result in compilation errors.
type UnsafePlayerServer interface {
	mustEmbedUnimplementedPlayerServer()
}

func RegisterPlayerServer(s grpc.ServiceRegistrar, srv PlayerServer) {
	// If the following call pancis, it indicates UnimplementedPlayerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Player_ServiceDesc, srv)
}

func _Player_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_GetCurrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetCurrent(ctx, req.(*GuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetById(ctx, req.(*TrackIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Skip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Skip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Skip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Skip(ctx, req.(*GuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Stop(ctx, req.(*GuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Pause(ctx, req.(*GuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Unpause(ctx, req.(*GuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_EnableLoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableLoopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).EnableLoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_EnableLoop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).EnableLoop(ctx, req.(*EnableLoopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_SetVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).SetVolume(ctx, req.(*SetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Remove(ctx, req.(*TrackIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_RemoveByPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveByPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).RemoveByPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_RemoveByPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).RemoveByPosition(ctx, req.(*RemoveByPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Player_ServiceDesc is the grpc.ServiceDesc for Player service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Player_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Player_Fetch_Handler,
		},
		{
			MethodName: "GetCurrent",
			Handler:    _Player_GetCurrent_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Player_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Player_GetAll_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Player_Add_Handler,
		},
		{
			MethodName: "Skip",
			Handler:    _Player_Skip_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Player_Stop_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Player_Pause_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _Player_Unpause_Handler,
		},
		{
			MethodName: "EnableLoop",
			Handler:    _Player_EnableLoop_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _Player_SetVolume_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Player_Remove_Handler,
		},
		{
			MethodName: "RemoveByPosition",
			Handler:    _Player_RemoveByPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/player/player.proto",
}
